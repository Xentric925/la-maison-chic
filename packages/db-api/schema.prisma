generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["private", "public", "jobs"]
}

model Details {
  id        String    @id @default(uuid())
  firstName String
  lastName  String
  phone     String?
  address   String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  user     User?
  customer Customer?
  supplier Supplier?

  @@index([firstName, lastName])
  @@index([phone])
  @@schema("public")
}

model UserAuth {
  id           String    @id @default(uuid())
  userId       String    @unique
  loginToken   String?
  refreshToken String?
  sessionId    String?
  expiresAt    DateTime? // login token expiration date
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@index([loginToken])
  @@index([refreshToken])
  @@index([sessionId])
  @@schema("private")
}

enum UserRole {
  ADMIN
  USER

  @@schema("public")
}

model Job {
  id           String    @id @default(uuid())
  type         JobType
  status       JobStatus
  priority     Int       @default(0)
  payload      Json
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  completedAt  DateTime?
  errorMessage String?
  failureCount Int       @default(0)

  @@schema("jobs")
}

enum JobStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  CANCELED
  RETRY

  @@schema("jobs")
}

enum JobType {
  EMAIL
  SMS
  PUSH_NOTIFICATION
  SLACK

  @@schema("jobs")
}

model User {
  id        String    @id @default(uuid())
  details   Details   @relation(fields: [detailsId], references: [id])
  detailsId String    @unique
  username  String    @unique
  email     String    @unique
  password  String
  role      UserRole
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  UserAuth  UserAuth?

  @@index([username])
  @@index([email])
  @@schema("public")
}

model Customer {
  id        String    @id @default(uuid())
  details   Details   @relation(fields: [detailsId], references: [id])
  detailsId String    @unique
  purchases Sale[]
  payments  Payment[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([detailsId])
  @@schema("public")
}

model Supplier {
  id        String     @id @default(uuid())
  details   Details    @relation(fields: [detailsId], references: [id])
  detailsId String     @unique
  products  Product[]
  carpets   Carpet[]
  purchases Purchase[]
  payments  Payment[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  deletedAt DateTime?

  @@index([detailsId])
  @@schema("public")
}

model Product {
  id            String            @id @default(uuid())
  name          String
  description   String?
  price         Float
  quantity      Int               @default(1)
  supplier      Supplier?         @relation(fields: [supplierId], references: [id])
  supplierId    String?
  isOwnedByShop Boolean           @default(true)
  purchaseCost  Float?
  images        ProductImage[]
  carpets       Carpet[]
  dimensions    ProductDimension?
  salesDetails  SalesDetail[]
  purchases     PurchaseDetail[]
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  deletedAt     DateTime?

  @@index([name])
  @@index([price])
  @@index([quantity])
  @@index([supplierId])
  @@index([isOwnedByShop])
  @@schema("public")
}

model ProductImage {
  id        String    @id @default(uuid())
  url       String
  product   Product   @relation(fields: [productId], references: [id])
  productId String
  createdAt DateTime  @default(now())
  deletedAt DateTime?

  @@index([productId])
  @@schema("public")
}

model ProductDimension {
  id        String    @id @default(uuid())
  product   Product   @relation(fields: [productId], references: [id])
  productId String    @unique
  width     Float?
  length    Float?
  height    Float?
  diameter  Float?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([productId])
  @@schema("public")
}

model Carpet {
  id         String    @id @default(uuid())
  code       String
  supplierId String?
  supplier   Supplier? @relation(fields: [supplierId], references: [id])
  product    Product   @relation(fields: [productId], references: [id])
  productId  String
  deletedAt  DateTime?

  @@unique([code, supplierId])
  @@index([code])
  @@index([supplierId])
  @@index([productId])
  @@schema("public")
}

model Sale {
  id           String        @id @default(uuid())
  customer     Customer      @relation(fields: [customerId], references: [id])
  customerId   String
  salesDetails SalesDetail[]
  totalCost    Float
  paidAmount   Float         @default(0)
  status       SaleStatus    @default(PENDING)
  payments     Payment[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  deletedAt    DateTime?

  @@index([customerId])
  @@index([status])
  @@schema("private")
}

model SalesDetail {
  id        String    @id @default(uuid())
  sale      Sale      @relation(fields: [saleId], references: [id])
  saleId    String
  product   Product   @relation(fields: [productId], references: [id])
  productId String
  quantity  Int       @default(1)
  soldPrice Float
  deletedAt DateTime?

  @@index([saleId])
  @@index([productId])
  @@schema("private")
}

model Purchase {
  id              String           @id @default(uuid())
  supplier        Supplier         @relation(fields: [supplierId], references: [id])
  supplierId      String
  purchaseDetails PurchaseDetail[]
  totalCost       Float
  paidAmount      Float            @default(0)
  dueDate         DateTime?
  status          PurchaseStatus   @default(PENDING)
  payments        Payment[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  deletedAt       DateTime?

  @@index([supplierId])
  @@index([status])
  @@index([dueDate])
  @@schema("private")
}

model PurchaseDetail {
  id         String    @id @default(uuid())
  purchase   Purchase  @relation(fields: [purchaseId], references: [id])
  purchaseId String
  product    Product   @relation(fields: [productId], references: [id])
  productId  String
  quantity   Int       @default(1)
  costPrice  Float
  deletedAt  DateTime?

  @@index([purchaseId])
  @@index([productId])
  @@schema("private")
}

model Payment {
  id         String    @id @default(uuid())
  amount     Float
  date       DateTime  @default(now())
  sale       Sale?     @relation(fields: [saleId], references: [id])
  saleId     String?
  purchase   Purchase? @relation(fields: [purchaseId], references: [id])
  purchaseId String?
  customer   Customer? @relation(fields: [customerId], references: [id])
  customerId String?
  supplier   Supplier? @relation(fields: [supplierId], references: [id])
  supplierId String?
  createdAt  DateTime  @default(now())
  deletedAt  DateTime?

  @@index([saleId])
  @@index([purchaseId])
  @@index([customerId])
  @@index([supplierId])
  @@index([date])
  @@schema("private")
}

enum SaleStatus {
  PENDING
  COMPLETED
  PARTIAL_PAYMENT

  @@schema("private")
}

enum PurchaseStatus {
  PENDING
  COMPLETED
  PARTIAL_PAYMENT

  @@schema("private")
}
